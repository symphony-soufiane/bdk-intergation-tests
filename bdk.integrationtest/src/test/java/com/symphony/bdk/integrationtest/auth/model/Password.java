package com.symphony.bdk.integrationtest.auth.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * @note DONT REMOVE IT, THIS IS A WORKAROUND
 * THIS CLASS HAS BEEN GENERATED WITH openapi-generator-maven-plugin AND COPIED HERE MANUALLY TO OVERRIDE THE CLASS AUTO-GENERATED BY swagger-codegen-maven-plugin IMPORTED FROM SBE
 * This latter does not work as expected due bad support of field names with second character in uppercase, like 'hSalt', 'hPassword'...
 */


/**
 * Password. Stored as derived password in both the Pod and the Key Manager using PBKDF2 function. Number of iterations should be 10000 and desired length 256 bits.
 */
@ApiModel(description = "Password. Stored as derived password in both the Pod and the Key Manager using PBKDF2 function. Number of iterations should be 10000 and desired length 256 bits.")
@JsonPropertyOrder({
    Password.JSON_PROPERTY_H_SALT,
    Password.JSON_PROPERTY_H_PASSWORD,
    Password.JSON_PROPERTY_KH_SALT,
    Password.JSON_PROPERTY_KH_PASSWORD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T10:13:18.049+02:00[Europe/Paris]")
public class Password {
  public static final String JSON_PROPERTY_H_SALT = "hSalt";
  private String hSalt;

  public static final String JSON_PROPERTY_H_PASSWORD = "hPassword";
  private String hPassword;

  public static final String JSON_PROPERTY_KH_SALT = "khSalt";
  private String khSalt;

  public static final String JSON_PROPERTY_KH_PASSWORD = "khPassword";
  private String khPassword;


  public Password hSalt(String hSalt) {

    this.hSalt = hSalt;
    return this;
  }

  /**
   * Pod password salt used for PBKDF2 derivation.
   * @return hSalt
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pod password salt used for PBKDF2 derivation.")
  @JsonProperty(JSON_PROPERTY_H_SALT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String gethSalt() {
    return hSalt;
  }


  public void sethSalt(String hSalt) {
    this.hSalt = hSalt;
  }


  public Password hPassword(String hPassword) {

    this.hPassword = hPassword;
    return this;
  }

  /**
   * Pod password derived with PBKDF2.
   * @return hPassword
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pod password derived with PBKDF2.")
  @JsonProperty(JSON_PROPERTY_H_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String gethPassword() {
    return hPassword;
  }


  public void sethPassword(String hPassword) {
    this.hPassword = hPassword;
  }


  public Password khSalt(String khSalt) {

    this.khSalt = khSalt;
    return this;
  }

  /**
   * Key Manager password salt used for PBKDF2 derivation.
   * @return khSalt
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Key Manager password salt used for PBKDF2 derivation.")
  @JsonProperty(JSON_PROPERTY_KH_SALT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKhSalt() {
    return khSalt;
  }


  public void setKhSalt(String khSalt) {
    this.khSalt = khSalt;
  }


  public Password khPassword(String khPassword) {

    this.khPassword = khPassword;
    return this;
  }

  /**
   * Key Manager password derived with PBKDF2.
   * @return khPassword
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Key Manager password derived with PBKDF2.")
  @JsonProperty(JSON_PROPERTY_KH_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKhPassword() {
    return khPassword;
  }


  public void setKhPassword(String khPassword) {
    this.khPassword = khPassword;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Password password = (Password) o;
    return Objects.equals(this.hSalt, password.hSalt) &&
        Objects.equals(this.hPassword, password.hPassword) &&
        Objects.equals(this.khSalt, password.khSalt) &&
        Objects.equals(this.khPassword, password.khPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hSalt, hPassword, khSalt, khPassword);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Password {\n");
    sb.append("    hSalt: ").append(toIndentedString(hSalt)).append("\n");
    sb.append("    hPassword: ").append(toIndentedString(hPassword)).append("\n");
    sb.append("    khSalt: ").append(toIndentedString(khSalt)).append("\n");
    sb.append("    khPassword: ").append(toIndentedString(khPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

